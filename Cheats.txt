using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;//needed for array list//

namespace Try_1
{
    class Program
    {
        public  static int Adder(int num3, int num4)
        {
            int result = num3 + num4;
            return result;
        }
        static void Main(string[] args)
        {
            ArrayList mylist = new ArrayList();
            mylist.Add("121");
            mylist.Add("122");
            mylist.Add(10);//how to add to arraylist//
            mylist.Remove(10);//how to remove from arraylist
            mylist.Remove(mylist[0]);//how to remove with index//
            Console.WriteLine(mylist[0]);
            // DataType[] arrayName;//
            int[] collection = { 1, 2, 2, 3, 4 };
            //2D array //
            int[,] array2D = new int[,]
            {
                {1,2,3 }, // row 0//
                {4,5,6 } // row 1//
            };
            //3D array //
            string[,,] array3D = new string[,,]
            {
                {
                    {"001","002" },
                    {"003","004" }
                },
                {
                    {"011","012" },
                    {"013","014" }
                }
            };
            //jagged array declaration //
            int[][] Arr2 = new int[][]
            {
                new int[]{1,2,3,4,5},
                new int[]{1,2,3}
            };

            Console.WriteLine(array3D[1, 1, 0]);// how to pull elements from multi dimentional arrays
            Console.WriteLine(array3D.Rank);// how to pull elements from multi dimentional arrays

            int length = 12;
            //parsing means turning string intu numeric data type //
            // int.tryParse(WhatToParse , out NewParsedVariable//
            int age = 30;
            float age2 = 30.99f; // float needs f  7digit//
            bool isequal = age == age2;//to compare //
            // && is AND  || is OR operator // 
            decimal age3 = 1.5M; // float needs  m 28decimal//
            char singlecharacter = 'a'; //char uses 1 character only //
            //  cant divide int by double //
            string name = "asd";
            string nameup = name.ToUpper();
            //explicit conversion//
            double numdb = 32.22;
            int numdbToInt;
            numdbToInt = (int)numdb;
            //explicit conversion//
            //implicit conversion//
            float somefloat = 30.32f;
            double FloatToDouble = somefloat;
            //implicit conversion//
            string parsexample = "12";
            string parsexample2 = "13";
            string somestring = somefloat.ToString(); //tostring converts to string//
            int parsed1 = Int32.Parse(parsexample);//parsing a string to a integer//
            int parsed2 = Int32.Parse(parsexample2);
            const int ConstantNumber = 3; // constant number  ,doesnt change ,doesnt mutate //
                                          // <access specifier> <Return Type> <Method Name> (parameter list) { Method Body } //
                                          //to call a method that is not in main method both methods needs to static (only static methods can call each other ) //
                                          //to call a method out side of main it needs to be static //
            int AdderViaInput() // method (no access  modifier need in main //
            {
                string x = Console.ReadLine();//reads input from the user//
                string y = Console.ReadLine();
                int result = Int32.Parse(x) + Int32.Parse(y);
                return result;
            }
            Adder(2, 5);
            try
            {
                //enter method here//
                string x2 = Console.ReadLine();
                int inputx2 = int.Parse(x2);
            }
            catch (FormatException) //trype of exception should be entered //
            {

                Console.WriteLine("error");//what happens when error occurs//
            }
            //classic if logic//
            if (age2 < age)
            {
                Console.WriteLine("if here");
            }
            else if (age2 == age)
            {
                Console.WriteLine("else if here");
            }
            else
            {
                Console.WriteLine("else here ");
            }
            //switch case//
            switch (age)
            {
                case 15:
                    //condition //
                    break;
                case 35:
                    break;
                default:
                    break; //body like else//

            }
            // condition ? first_expression : second_expression;//
            //cpmdition has to be true or false//
            int tempature = -5;
            string stateofmatter = tempature < 0 ? "solid" : "liquid"; // under 0 is solid ,else liquid //
            string stateofmatter2 = tempature > 100 ? "gas" : tempature < 0 ? "solid" : "liquid"; // if else if and else statement //
            // expressions can be another statement //
            for (int i = 0; i < length; i++)// for (start value , condition , increment //
            {
                //body//
            }
            while (true) //while (condition)//
            {
                break; //body//
            }
            do
            {
                break;  //code block//
                //icrement/
            } while (true);//condition//

            foreach (var item in collection)// python like array execution//
            {
                break;//body//
            }
            //------------------object orianted------------------//
            //car instance created //
            car audi = new car();
            // car attribute created //
            // audi.model = "q7";
            audi.changeModel();
            car bmw = new car("i8", "2019", 1000);
            //setter used//
            bmw.setterCar("i10");
            //getter used//
            bmw.getterCar();
            foreach (int item in collection)//for each implementation//
            {
                int item2 = item * item;
                Console.WriteLine(item2);
            }
            char[,] grid2darray =
            {
                {' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                {' ','1',' ','|',' ','2',' ','|',' ','3',' '},
                {'_','_','_','|','_','_','_','|','_','_','_'},
                {' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                {' ','4',' ','|',' ','5',' ','|',' ','6',' '},
                {'_','_','_','|','_','_','_','|','_','_','_'},
                {' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
                {' ','7',' ','|',' ','8',' ','|',' ','9',' '},
                {' ',' ',' ','|',' ',' ',' ','|',' ',' ',' '},
            };

            // grid2darray[1, 1] = '2'; how to assign value//
            // Two-dimensional array  //
            int[,] arr = new int[,] {{1, 2},
                                   {3, 4},
                                   {5, 6},
                                   {7, 8}};
            arr[1,0] = 2;
            string line = "";
            bool GameCont=true;
            int counter = grid2darray.Length/11;
            void wincheck()
            {
                for (int i = 0; i < counter; i++)
                {
                    if ( i%3==1 && (grid2darray[i, 1] == grid2darray[i, 5] && grid2darray[i, 5] == grid2darray[i, 9]))
                    { 
                        Console.WriteLine("somebody won");
                        GameCont = false;
                    }
                    else if(i % 4 == 1 && (grid2darray[1, i] == grid2darray[4, i] && grid2darray[4, i] == grid2darray[7, i]))
                    {
                        Console.WriteLine("somebodywon verticaly");
                        GameCont = false;
                    }
                }
                if (grid2darray[1, 1] == grid2darray[4, 5] && grid2darray[4, 5] == grid2darray[7, 9])
                { 
					Console.WriteLine("somebodywon diagonally");
                    GameCont = false;
                }
                else if (grid2darray[7, 1] == grid2darray[4, 5] && grid2darray[4, 5] == grid2darray[1, 9])
                {
                    Console.WriteLine("somebodywon diagonally");
                    GameCont = false;
                }

            }

            void drawboard()
            {
                StringBuilder builder = new StringBuilder();

                for (int k = 0; k < 9; )
                {


                    for (int i = 0; i < grid2darray.Length/9; i++)
                    {

                        builder.Append(grid2darray[k, i]);

                    }
                    Console.WriteLine(builder);
                    builder = new StringBuilder();
                    k++;
                }

            }

            //TO DO //
            void play()
            {
                while (GameCont)
                {
                    Console.Clear();

                    drawboard();

                    string x = Console.ReadLine();
                    char y = char.Parse(x);
                    if (y == '1')
                    {
                        grid2darray[1, 1] = 'X';
                        
                    }
                    else
                        Console.WriteLine("try again bro");
                }
                

            }
            drawboard();
            wincheck();
            RaceCar mcleren = new RaceCar();
            Console.WriteLine(mcleren.price);
            mcleren.RDrive();
            mcleren.Drive();
            mcleren.changeModel();
            Console.ReadLine();
            

        }
    }
    //interface implementation //
    public interface CarInterface
    {
        void Drive();
    }
    //-------------example class -----------//
    public class car:CarInterface
    {
        //attribute is given to class/member variable //
        public string model;
        public string year;
        public int price;

        //member method //
        public void changeModel()
        {
            Console.WriteLine("model has been changed");
            //how to change an attribute via method//
            this.model = "a8";
        }
        //car constructor with 3 parameters and their deafult versions//
        public  car(string model=null, string year = null, int price = 1000 ,string Country = null)
        {
            this.model = model;
            this.year = year;
            this.price = price;
        }
        //standart java type setter//
        public void setterCar(string model)
        {
            this.model = model;
        }
        //standart java type getter//
        public void getterCar( )
        {
            int x = this.price;
            string sprice = x.ToString();
            //return new[] { this.model, this.year, sprice };
            Console.WriteLine("model = {0} , and year = {1} and price is {2}",this.model, this.year, sprice);
            
        }

        public void Drive()
        {
            Console.WriteLine("wroom from drive");
        }



        //inheritance deffining a class in terms of another class//
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Try_1
{   //interface initialization here (use a different file in real use)
    public interface RaceCarInterface
    {
        void RDrive();
        
    }
    // this class inherits from car class//
    class RaceCar:car,RaceCarInterface
    {
        public int HrP;
        // cant access properties here if they're piravate //
        public RaceCar(int HrP = 200) : base()
        {
            this.HrP = HrP;
        }
        //overrides the changeModel method "new" keyword is used//
        public new void  changeModel()
        {
            Console.WriteLine("cant change model of a race car");
        }

        public void RDrive()
        {
            Console.WriteLine("wroom");

        }
    }
}
